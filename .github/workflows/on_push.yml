name: Release

on:
  push:
    tags:
      - '*'

env:
  ACTIONS_RUNNER_DEBUG: true

jobs:
  build-darwin:
    name: Release new version
    runs-on: macos-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@v3
      -
        name: Install xcodegen
        run: brew install xcodegen
      -
        name: Generate Project
        run: xcodegen
      -
        name: Build App
        run: xcodebuild
      -
        name: Import Certs
        uses: Apple-Actions/import-codesign-certs@v1
        with:
          # The certificates in a PKCS12 file encoded as a base64 string
          p12-file-base64: ${{ secrets.APPLE_DEVELOPER_CERTIFICATE_P12_BASE64 }}
          # The password used to import the PKCS12 file.
          p12-password: ${{ secrets.APPLE_DEVELOPER_CERTIFICATE_PASSWORD }}
      -
        name: Sign
        run: /usr/bin/codesign --force -s "WakaTime" --options runtime build/Debug/WakaTime.app -v
      -
        name: Notarize
        # Extract the secrets we defined earlier as environment variables
        env:
          NOTARIZATION_APPLE_ID: ${{ secrets.AC_USERNAME }}
          NOTARIZATION_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          NOTARIZATION_PWD: ${{ secrets.AC_PASSWORD }}
        run: |
          # Store the notarization credentials so that we can prevent a UI password dialog
          # from blocking the CI

          echo "Create keychain profile"
          xcrun notarytool store-credentials "notarytool-profile" --apple-id "$NOTARIZATION_APPLE_ID" --team-id "$NOTARIZATION_TEAM_ID" --password "$NOTARIZATION_PWD"

          # We can't notarize an app bundle directly, but we need to compress it as an archive.
          # Therefore, we create a zip file containing our app bundle, so that we can send it to the
          # notarization service

          echo "Creating temp notarization archive"
          ditto -c -k --keepParent "build/Debug/WakaTime.app" "notarization.zip"

          # Here we send the notarization request to the Apple's Notarization service, waiting for the result.
          # This typically takes a few seconds inside a CI environment, but it might take more depending on the App
          # characteristics. Visit the Notarization docs for more information and strategies on how to optimize it if
          # you're curious

          echo "Notarize app"
          xcrun notarytool submit "notarization.zip" --keychain-profile "notarytool-profile" --wait

          # Finally, we need to "attach the staple" to our executable, which will allow our app to be
          # validated by macOS even when an internet connection is not available.
          echo "Attach staple"
          xcrun stapler staple "build/Debug/WakaTime.app"
      -
        name: Zip
        run: ditto -c -k --sequesterRsrc --keepParent build/Debug/WakaTime.app WakaTime.zip
      -
        name: Create release
        uses: softprops/action-gh-release@v1
        with:
          files: WakaTime.zip
